=Weather=

http://api.openweathermap.org/data/2.5/forecast?lat=35&lon=139&units=metric&lang=ru

http://metwit.com/weather-api/

=== Checking if key for value exists ===
{{{
BOOL supportsSomeKey = YES;
@try
{
    [object valueForKey:somekey];
}
@catch (NSException *e)
{
    if ([[e name] isEqualTo:NSUndefinedKeyException])
    {
        supportsSomeKey = NO;
    }
}
}}}

=== For complex paths ===

Similarly, valueForKeyPath: returns the value for the specified key path, relative to the receiver. Any object in the key path sequence that is not key-value coding compliant for the appropriate key receives a valueForUndefinedKey: message.


== NOAA ==

http://graphical.weather.gov/xml/rest.php

http://umcs.maine.edu/~wlamond/pdf/w-lamond-ios-report.pdf

_geo code for US? if US, use NOAA, else use openweathermap_

=== Example for daily forecast 24 hours ===

http://graphical.weather.gov/xml/sample_products/browser_interface/ndfdBrowserClientByDay.php?lat=38.99&lon=-77.01&format=24+hourly&numDays=7

Response: 
{{{
<dwml xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" xsi:noNamespaceSchemaLocation="http://www.nws.noaa.gov/forecasts/xml/DWMLgen/schema/DWML.xsd">
<head>
<product srsName="WGS 1984" concise-name="dwmlByDay" operational-mode="official">
<title>
NOAA's National Weather Service Forecast by 24 Hour Period
</title>
<field>meteorological</field>
<category>forecast</category>
<creation-date refresh-frequency="PT1H">2014-01-29T13:41:38Z</creation-date>
</product>
<source>
<more-information>http://www.nws.noaa.gov/forecasts/xml/</more-information>
<production-center>
Meteorological Development Laboratory
<sub-center>Product Generation Branch</sub-center>
</production-center>
<disclaimer>http://www.nws.noaa.gov/disclaimer.html</disclaimer>
<credit>http://www.weather.gov/</credit>
<credit-logo>http://www.weather.gov/images/xml_logo.gif</credit-logo>
<feedback>http://www.weather.gov/feedback.php</feedback>
</source>
</head>
<data>
<location>
<location-key>point1</location-key>
<point latitude="38.99" longitude="-77.01"/>
</location>
<moreWeatherInformation applicable-location="point1">
http://forecast.weather.gov/MapClick.php?textField1=38.99&textField2=-77.01
</moreWeatherInformation>
<time-layout time-coordinate="local" summarization="24hourly">
<layout-key>k-p24h-n7-1</layout-key>
<start-valid-time>2014-01-29T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-30T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-30T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-31T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-31T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-01T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-01T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-02T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-02T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-03T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-03T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-04T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-04T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-05T06:00:00-05:00</end-valid-time>
</time-layout>
<time-layout time-coordinate="local" summarization="12hourly">
<layout-key>k-p12h-n14-2</layout-key>
<start-valid-time>2014-01-29T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-29T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-29T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-30T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-30T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-30T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-30T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-31T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-31T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-01-31T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-01-31T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-01T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-01T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-01T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-01T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-02T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-02T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-02T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-02T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-03T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-03T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-03T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-03T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-04T06:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-04T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-04T18:00:00-05:00</end-valid-time>
<start-valid-time>2014-02-04T18:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-05T06:00:00-05:00</end-valid-time>
</time-layout>
<time-layout time-coordinate="local" summarization="24hourly">
<layout-key>k-p7d-n1-3</layout-key>
<start-valid-time>2014-01-29T06:00:00-05:00</start-valid-time>
<end-valid-time>2014-02-05T06:00:00-05:00</end-valid-time>
</time-layout>
<parameters applicable-location="point1">
<temperature type="maximum" units="Fahrenheit" time-layout="k-p24h-n7-1">
<name>Daily Maximum Temperature</name>
<value>22</value>
<value>30</value>
<value>43</value>
<value>49</value>
<value>42</value>
<value>39</value>
<value>39</value>
</temperature>
<temperature type="minimum" units="Fahrenheit" time-layout="k-p24h-n7-1">
<name>Daily Minimum Temperature</name>
<value>13</value>
<value>22</value>
<value>30</value>
<value>34</value>
<value>28</value>
<value>28</value>
<value xsi:nil="true"/>
</temperature>
<probability-of-precipitation type="12 hour" units="percent" time-layout="k-p12h-n14-2">
<name>12 Hourly Probability of Precipitation</name>
<value>12</value>
<value>0</value>
<value>0</value>
<value>5</value>
<value>11</value>
<value>9</value>
<value>5</value>
<value>13</value>
<value>14</value>
<value>8</value>
<value>26</value>
<value>14</value>
<value>40</value>
<value xsi:nil="true"/>
</probability-of-precipitation>
<weather time-layout="k-p24h-n7-1">
<name>Weather Type, Coverage, and Intensity</name>
<weather-conditions weather-summary="Becoming Sunny"/>
<weather-conditions weather-summary="Partly Sunny"/>
<weather-conditions weather-summary="Mostly Cloudy"/>
<weather-conditions weather-summary="Mostly Cloudy"/>
<weather-conditions weather-summary="Mostly Cloudy"/>
<weather-conditions weather-summary="Chance Rain/Snow">
<value coverage="chance" intensity="light" weather-type="rain" qualifier="none"/>
<value coverage="chance" intensity="light" additive="and" weather-type="snow" qualifier="none"/>
</weather-conditions>
<weather-conditions weather-summary="Chance Rain/Snow">
<value coverage="chance" intensity="light" weather-type="rain" qualifier="none"/>
<value coverage="chance" intensity="light" additive="and" weather-type="snow" qualifier="none"/>
</weather-conditions>
</weather>
<conditions-icon type="forecast-NWS" time-layout="k-p24h-n7-1">...</conditions-icon>
<hazards time-layout="k-p7d-n1-3">
<name>Watches, Warnings, and Advisories</name>
<hazard-conditions xsi:nil="true"/>
</hazards>
</parameters>
</data>
</dwml>
}}}

*Has no wind information!*

=== Example for forecast, limited to mint and maxt  ===

http://graphical.weather.gov/xml/sample_products/browser_interface/ndfdXMLclient.php?lat=38.99&lon=-77.01&product=time-series&begin=2014-01-29T00:00:00&end=2014-2-6T00:00:00&maxt=maxt&mint=mint

=== US geo bounds ===

Coordinates for North America:
{{{
var strictBounds = new google.maps.LatLngBounds(
    new google.maps.LatLng(28.70, -127.50), 
    new google.maps.LatLng(48.85, -55.90)
);
}}}
weather.io: https://developer.forecast.io/

diy: http://sietse.net/iwdl-info/

Norwegian, looks good: http://api.yr.no/weatherapi/documentation

http://api.yr.no/weatherapi/locationforecast/1.8/documentation

== XML to NSDictionary ==

http://ios.biomsoft.com/2011/09/11/simple-xml-to-nsdictionary-converter/

=== Metar & Metaf parser ===

They mention NOAA as well in the demo. Looks like specific to pilots weather information. This is sourceforge, so look for a code as well!

http://metaf2xml.sourceforge.net/gui.html?lang=en


== SO - a good one ==

http://stackoverflow.com/questions/5775488/to-display-weather-forecast-for-currentday-next-day-and-day-after-next-day-in-ip

=== Icons ===

http://line25.com/tutorials/how-to-create-a-set-of-vector-weather-line-icons


=Stock=

http://www.blogbyben.com/2009/01/truly-simple-stock-api.html

http://www.gummy-stuff.org/Yahoo-data.htm

http://finance.google.com/finance/info?client=ig&q=NASDAQ%3aGOOG

http://stackoverflow.com/questions/10040954/alternative-to-google-finance-api

=Exchange rates=

= Twitter =

https://developer.apple.com/library/ios/documentation/Social/Reference/SLRequest_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40012234

https://dev.twitter.com/docs/ios

https://dev.twitter.com/docs/ios/making-api-requests-slrequest


{{{
//include twitter.framework 
#import <Twitter/Twitter.h>

+ (void)getTweetsFortwitterID:(NSString *)twitterID

{
    if(twitterID.length >0)
    {
    NSString * finalURL = [NSString stringWithFormat:@"https://api.twitter.com/1.1/statuses/user_timeline.json?include_entities=true&include_rts=true&screen_name=%@&count=10", twitterID];

    TWRequest *postRequest = [[TWRequest alloc] initWithURL:[NSURL URLWithString:finalURL] parameters:nil requestMethod:TWRequestMethodGET];

    ACAccountStore *accountStore = [[ACAccountStore alloc] init] ;

    ACAccountType *accountType =  [accountStore accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];

        // Request access from the user to use their Twitter accounts.
        [accountStore requestAccessToAccountsWithType:accountType withCompletionHandler:^(BOOL granted, NSError *error)
         {
             if(granted)
             {
                 NSArray *twitterAccounts = [accountStore accountsWithAccountType:accountType];

                 if([twitterAccounts count] >0
                    )
                 {
                 ACAccount *twitterAccount = [twitterAccounts objectAtIndex:0];
                 [postRequest setAccount:twitterAccount];

                 NSLog(@"request.account:%@",postRequest.account);

                 // Perform the request created above and create a handler block to handle the response.
                 NSMutableArray *tweetsArray=[[NSMutableArray alloc]init];

                 [postRequest performRequestWithHandler:^(NSData *responseData, NSHTTPURLResponse *urlResponse, NSError *error) {

                     // Parse the responseData, which we asked to be in JSON format for this request, into an NSDictionary using NSJSONSerialization.
                     NSArray *publicTimeline = nil;
                     NSError *jsonParsingError = nil;
                     if (responseData)
                     {
                         publicTimeline = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:&jsonParsingError];
                         NSLog(@"publicTimeline : %@", publicTimeline);
                     }

                     if ([publicTimeline isKindOfClass:[NSArray class]])
                     {

                         for (int i =0; i<[publicTimeline count]; i++)
                         {
                             NSMutableDictionary *twitterDict=[[NSMutableDictionary alloc]init];

                             if ([[publicTimeline objectAtIndex:i] objectForKey:@"text"])
                             {
                                 NSLog(@"ID: %@", [[publicTimeline objectAtIndex:i] objectForKey:@"text"]);
                                 [twitterDict setObject:[[publicTimeline objectAtIndex:i] objectForKey:@"text"] forKey:@"text"];
                             }
                             if ([[publicTimeline objectAtIndex:i] objectForKey:@"created_at"])
                             {
                                 NSLog(@"ID: %@", [[publicTimeline objectAtIndex:i] objectForKey:@"created_at"]);
                                 [twitterDict setObject:[[publicTimeline objectAtIndex:i] objectForKey:@"created_at"]
                                                 forKey:@"created_at"];
                             }

                             if ([[publicTimeline objectAtIndex:i] objectForKey:@"user"])
                             {
                                 NSLog(@"ID: %@", [[publicTimeline objectAtIndex:i] objectForKey:@"created_at"]);
                                 [twitterDict setObject:[[[publicTimeline objectAtIndex:i] objectForKey:@"user"]objectForKey:@"profile_image_url"]
                                                 forKey:@"profile_image_url"];
                             }


                             [tweetsArray addObject:twitterDict];
                             NSLog(@"tweets:%@", tweetsArray);

                         }
                     }

                     if([tweetsArray count]>0)
                         [[NSNotificationCenter defaultCenter] postNotificationName:@"tweetsLoaded" object:tweetsArray];


                 }];
                 }

             }

         }];
    }


}
}}}


== Russian news on twitter ==

https://twitter.com/russkie_novosti

https://twitter.com/sportnewsrus

== French news on twitter ==

https://twitter.com/LNEcanal