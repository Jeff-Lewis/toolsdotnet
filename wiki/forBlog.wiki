== On Silverlight plugin load/hang timeout in FF ==

blogged at: http://plainoldstan.blogspot.com/2010/08/silverlight-plugin-timeout-in-firefox.html

== On locking techniques in Silverlight - CLog case study ==

{{{

        void Page_Loaded(object sender, RoutedEventArgs e)
        {

            for (int i = 0; i < 2; i++)
            {

                ThreadPool.QueueUserWorkItem((state) => log.Info("This is a call with i="+state), i);
                LogViewer.OfflineMode = false;
                if (log.InfoEnabled)
                {
                    log.Info("UI" +Thread.CurrentThread.ManagedThreadId.ToString());
                }
            }
        }
}}}

{{{

lock (loggingConfigLock)
                {
....

clogService.BeginGetConfiguration(clientInfo,
                            asyncResult =>
                            {
                                ClientConfigurationData result;
                                try
{ .....
}}}

{{{
public interface IClogService {
        System.IAsyncResult BeginGetConfiguration(object clientInfo, System.AsyncCallback callback, object asyncState);
        
        DanielVaughan.Logging.ClientLogging.ClientConfigurationData EndGetConfiguration(System.IAsyncResult result);
}
}}}

{{{
    public partial class ClogServiceClient : System.ServiceModel.ClientBase<DanielVaughan.Logging.ClientLogging.IClogService>, DanielVaughan.Logging.ClientLogging.IClogService {
        public void GetConfigurationAsync(object clientInfo, object userState) {
            if ((this.onBeginGetConfigurationDelegate == null)) {
                this.onBeginGetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguration);
            }
            if ((this.onEndGetConfigurationDelegate == null)) {
                this.onEndGetConfigurationDelegate = new EndOperationDelegate(this.OnEndGetConfiguration);
            }
            if ((this.onGetConfigurationCompletedDelegate == null)) {
                this.onGetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationDelegate, new object[] {
                        clientInfo}, this.onEndGetConfigurationDelegate, this.onGetConfigurationCompletedDelegate, userState);
        }
...
}
}}}


== On extending Silverlight Unit Test harness ==

published: http://plainoldstan.blogspot.com/2010/06/extending-silverlight-unit-testing.html

== On using partial class to isolate silverlight wcf client to its interface ==
{{{
        public SiteSettingsContext(CommonServiceClient client) : this()
        {
            if ( client == null ) throw new ArgumentNullException("client");
            _client = client;
        }

    public interface ITerminologyService
    {
        event System.EventHandler<GetTerminologyListCompletedEventArgs> GetTerminologyListCompleted;
        void GetTerminologyListAsync();
    }

public partial class CommonServiceClient : ITerminologyService

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommonService.ICommonService")]
    public interface ICommonService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITerminologyProvider/GetTerminologyList", ReplyAction="http://tempuri.org/ITerminologyProvider/GetTerminologyListResponse")]
        System.IAsyncResult BeginGetTerminologyList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Valtera.WcfServices.Client.CommonService.Terminology> EndGetTerminologyList(System.IAsyncResult result);


private ITerminologyService _client = new CommonServiceClient();

        public SiteSettingsContext(ITerminologyService client)
            : this()
        {
            if ( client == null ) throw new ArgumentNullException("client");
            _client = client;
        }

}}}

== On using Moq with/for events ==
{{{

protected override void TestInitialize()
        {
            base.TestInitialize();
            _terminologyService = AutoMockRegistrator.CreateDynaMockFor<ITerminologyService>();

            _context = IoC.Resolve<SiteSettingsContext>();
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Should_ThrowWhenUsedAndNotLoadedYet()
        {
            var context = new SiteSettingsContext(_terminologyService.Object);
            var terminologies = context.GetTerminologies();
        }
        [TestMethod]
        [Asynchronous]
        [Timeout(500)]
        public void Should_HaveTerminologiesAfterLoad()
        {
            var context = new SiteSettingsContext(new TerminologyServiceStub());

            context.LoadCompleted += ( s, e ) =>
            {
                AssertForFixedTerminologies(context.GetTerminologies());
                EnqueueTestComplete();
            };
            context.Load();
        }
        [TestMethod]
        [Asynchronous]
        [Timeout(500)]
        public void Should_HaveTerminologiesAfterLoadMoq()
        {
            _terminologyService.Setup(t => t.GetTerminologyListAsync()).Callback(()=>
            {
                _terminologyService.Raise(ts => ts.GetTerminologyListCompleted += null, new GetTerminologyListCompletedEventArgs(TerminologyFake.GetFixedActionPlanTerminology(), null,
false, null));
            });

            var context = new SiteSettingsContext(_terminologyService.Object);

            context.LoadCompleted += (s, e) =>
            {
                AssertForFixedTerminologies(context.GetTerminologies());
                EnqueueTestComplete();
            };
            context.Load();
        }


        internal class TerminologyServiceStub : ITerminologyService
        {
            public event EventHandler<GetTerminologyListCompletedEventArgs> GetTerminologyListCompleted;
            public void GetTerminologyListAsync()
            {
                // Verify that event has been subscribed to
                Assert.IsNotNull(GetTerminologyListCompleted);
                // Raise the event
                GetTerminologyListCompleted(this,
                    new GetTerminologyListCompletedEventArgs(TerminologyFake.GetFixedActionPlanTerminology(), null,
                        false, null));
            }
        }

}}}

== On logging from Silverlight to Browser console ==

published: http://plainoldstan.blogspot.com/2010/06/silverlight-browser-console-logger.html

== On TlbImp : error TI0000: Encountered multiple versions of the assembly with GUID ==
https://connect.microsoft.com/VisualStudio/feedback/details/565978/tlbimp-encountered-multiple-versions-of-the-assembly-with-guid-000204ef-0000-0000-c000-000000000046?wa=wsignin1.0#tabs

== On Attempt to access the method failed - ArrayList ==
http://forums.silverlight.net/forums/p/1456/4118.aspx

== On identifying the x64 or xOS ==
All praise to http://www.koders.com/csharp/fid495E7D0ED07BA35F5F0CE0EEFE87D7375BF1CF55.aspx

and extracted code is:
{{{
        internal const ushort PROCESSOR_ARCHITECTURE_INTEL = 0;
        internal const ushort PROCESSOR_ARCHITECTURE_IA64 = 6;
        internal const ushort PROCESSOR_ARCHITECTURE_AMD64 = 9;
        internal const ushort PROCESSOR_ARCHITECTURE_UNKNOWN = 0xFFFF;

[StructLayout(LayoutKind.Sequential)]
        internal struct SYSTEM_INFO
        {
            public ushort wProcessorArchitecture;
            public ushort wReserved;
            public uint dwPageSize;
            public IntPtr lpMinimumApplicationAddress;
            public IntPtr lpMaximumApplicationAddress;
            public UIntPtr dwActiveProcessorMask;
            public uint dwNumberOfProcessors;
            public uint dwProcessorType;
            public uint dwAllocationGranularity;
            public ushort wProcessorLevel;
            public ushort wProcessorRevision;
        };

        [DllImport("kernel32.dll")]
        internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);

        private enum Platform
        {
            X86,
            X64,
            Unknown
        }

        private static Platform GetPlatform()
        {
            SYSTEM_INFO sysInfo = new SYSTEM_INFO();
            GetNativeSystemInfo(ref sysInfo);

            switch (sysInfo.wProcessorArchitecture)
            {
                case PROCESSOR_ARCHITECTURE_AMD64:
                    return Platform.X64;

                case PROCESSOR_ARCHITECTURE_INTEL:
                    return Platform.X86;

                default:
                    return Platform.Unknown;
            }
        }
}}}

and sample of usage would be:
{{{
            var platform = GetPlatform();
 
            if (platform == Platform.Unknown)
                throw new InvalidOperationException("Registering generator tools on this platform is not supported!");

            if (platform == Platform.X64)
                wowPrefix = WOW_NODE_PATTERN;
}}}

== On robustness in regard to Isolated storage usage ==

{{{
            if (!IsolatedStorageFile.IsEnabled)
                return;
}}}

Unhandled Error in Silverlight Application Initialization failed. at System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStore(String group, String id) at System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication() at System.IO.IsolatedStorage.IsolatedStorageSettings.get_ApplicationSettings() at Microsoft.Silverlight.Testing.Client.TagEditor..ctor() at Microsoft.Silverlight.Testing.Client.TagEditor..ctor(String initialTagExpression, IList`1 sampleTags) at Microsoft.Silverlight.Testing.Client.TestPage.StartupMonitor(Object sender, EventArgs e) at MS.Internal.CoreInvokeHandler.InvokeEventHandler(Int32 typeIndex, Delegate handlerDelegate, Object sender, Object args) at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, String eventName)

== On Telerik's RadMenuItem Tooltip ==

{{{
					<telerik1:RadMenuItem Header="Hierarchy node X fgdfgsdmfgklmfglhmdklfhmkldfmghklmdfghkmdfghkmdfk..." >
						<ToolTipService.ToolTip>
		                    <ListBox x:Name="Applications" 
		                             Background="Transparent" BorderThickness="0" ItemsSource="{Binding Path=.}" 
		                             Margin="10,0,0,0" >
		                        <ListBox.ItemTemplate>
		                            <DataTemplate>
		                            	<StackPanel Orientation="Horizontal">
											<TextBlock Text="{Binding Path=.}" TextWrapping="Wrap" MaxWidth="200"/>
											<Image  Source="arrow_state_blue_right.png" Stretch="Fill" />
										</StackPanel>
		                            </DataTemplate>
		                        </ListBox.ItemTemplate>
								<ListBox.ItemsPanel>
					                <ItemsPanelTemplate>
					                    <StackPanel Orientation="Horizontal"/>                                           
					                </ItemsPanelTemplate>
					            </ListBox.ItemsPanel>
		                    </ListBox>
						</ToolTipService.ToolTip>
				</telerik1:RadMenuItem>
}}}
{{{
	public partial class MainPage : UserControl
	{
		public List<string> Nodes = new List<string>{"Node1", "Node2", "Node3 gggg", "Hierarchy node X"};
		
		public MainPage()
		{
			// Required to initialize variables
			InitializeComponent();
			this.DataContext = Nodes;	
		}
		
	}
}}}