== On migration from TFS 2008 to 2010 ==
published

== On Silverlight plugin load/hang timeout in FF ==

blogged at: http://plainoldstan.blogspot.com/2010/08/silverlight-plugin-timeout-in-firefox.html

== On locking techniques in Silverlight - CLog case study ==

{{{

        void Page_Loaded(object sender, RoutedEventArgs e)
        {

            for (int i = 0; i < 2; i++)
            {

                ThreadPool.QueueUserWorkItem((state) => log.Info("This is a call with i="+state), i);
                LogViewer.OfflineMode = false;
                if (log.InfoEnabled)
                {
                    log.Info("UI" +Thread.CurrentThread.ManagedThreadId.ToString());
                }
            }
        }
}}}

{{{

lock (loggingConfigLock)
                {
....

clogService.BeginGetConfiguration(clientInfo,
                            asyncResult =>
                            {
                                ClientConfigurationData result;
                                try
{ .....
}}}

{{{
public interface IClogService {
        System.IAsyncResult BeginGetConfiguration(object clientInfo, System.AsyncCallback callback, object asyncState);
        
        DanielVaughan.Logging.ClientLogging.ClientConfigurationData EndGetConfiguration(System.IAsyncResult result);
}
}}}

{{{
    public partial class ClogServiceClient : System.ServiceModel.ClientBase<DanielVaughan.Logging.ClientLogging.IClogService>, DanielVaughan.Logging.ClientLogging.IClogService {
        public void GetConfigurationAsync(object clientInfo, object userState) {
            if ((this.onBeginGetConfigurationDelegate == null)) {
                this.onBeginGetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguration);
            }
            if ((this.onEndGetConfigurationDelegate == null)) {
                this.onEndGetConfigurationDelegate = new EndOperationDelegate(this.OnEndGetConfiguration);
            }
            if ((this.onGetConfigurationCompletedDelegate == null)) {
                this.onGetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationDelegate, new object[] {
                        clientInfo}, this.onEndGetConfigurationDelegate, this.onGetConfigurationCompletedDelegate, userState);
        }
...
}
}}}


== On extending Silverlight Unit Test harness ==

published: http://plainoldstan.blogspot.com/2010/06/extending-silverlight-unit-testing.html

== On using partial class to isolate silverlight wcf client to its interface ==
{{{
        public SiteSettingsContext(CommonServiceClient client) : this()
        {
            if ( client == null ) throw new ArgumentNullException("client");
            _client = client;
        }

    public interface ITerminologyService
    {
        event System.EventHandler<GetTerminologyListCompletedEventArgs> GetTerminologyListCompleted;
        void GetTerminologyListAsync();
    }

public partial class CommonServiceClient : ITerminologyService

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommonService.ICommonService")]
    public interface ICommonService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITerminologyProvider/GetTerminologyList", ReplyAction="http://tempuri.org/ITerminologyProvider/GetTerminologyListResponse")]
        System.IAsyncResult BeginGetTerminologyList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Valtera.WcfServices.Client.CommonService.Terminology> EndGetTerminologyList(System.IAsyncResult result);


private ITerminologyService _client = new CommonServiceClient();

        public SiteSettingsContext(ITerminologyService client)
            : this()
        {
            if ( client == null ) throw new ArgumentNullException("client");
            _client = client;
        }

}}}

== On using Moq with/for events ==
{{{

protected override void TestInitialize()
        {
            base.TestInitialize();
            _terminologyService = AutoMockRegistrator.CreateDynaMockFor<ITerminologyService>();

            _context = IoC.Resolve<SiteSettingsContext>();
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Should_ThrowWhenUsedAndNotLoadedYet()
        {
            var context = new SiteSettingsContext(_terminologyService.Object);
            var terminologies = context.GetTerminologies();
        }
        [TestMethod]
        [Asynchronous]
        [Timeout(500)]
        public void Should_HaveTerminologiesAfterLoad()
        {
            var context = new SiteSettingsContext(new TerminologyServiceStub());

            context.LoadCompleted += ( s, e ) =>
            {
                AssertForFixedTerminologies(context.GetTerminologies());
                EnqueueTestComplete();
            };
            context.Load();
        }
        [TestMethod]
        [Asynchronous]
        [Timeout(500)]
        public void Should_HaveTerminologiesAfterLoadMoq()
        {
            _terminologyService.Setup(t => t.GetTerminologyListAsync()).Callback(()=>
            {
                _terminologyService.Raise(ts => ts.GetTerminologyListCompleted += null, new GetTerminologyListCompletedEventArgs(TerminologyFake.GetFixedActionPlanTerminology(), null,
false, null));
            });

            var context = new SiteSettingsContext(_terminologyService.Object);

            context.LoadCompleted += (s, e) =>
            {
                AssertForFixedTerminologies(context.GetTerminologies());
                EnqueueTestComplete();
            };
            context.Load();
        }


        internal class TerminologyServiceStub : ITerminologyService
        {
            public event EventHandler<GetTerminologyListCompletedEventArgs> GetTerminologyListCompleted;
            public void GetTerminologyListAsync()
            {
                // Verify that event has been subscribed to
                Assert.IsNotNull(GetTerminologyListCompleted);
                // Raise the event
                GetTerminologyListCompleted(this,
                    new GetTerminologyListCompletedEventArgs(TerminologyFake.GetFixedActionPlanTerminology(), null,
                        false, null));
            }
        }

}}}

== On logging from Silverlight to Browser console ==

published: http://plainoldstan.blogspot.com/2010/06/silverlight-browser-console-logger.html

== On TlbImp : error TI0000: Encountered multiple versions of the assembly with GUID ==
https://connect.microsoft.com/VisualStudio/feedback/details/565978/tlbimp-encountered-multiple-versions-of-the-assembly-with-guid-000204ef-0000-0000-c000-000000000046?wa=wsignin1.0#tabs

== On Attempt to access the method failed - ArrayList ==
http://forums.silverlight.net/forums/p/1456/4118.aspx

== On identifying the x64 or xOS ==
All praise to http://www.koders.com/csharp/fid495E7D0ED07BA35F5F0CE0EEFE87D7375BF1CF55.aspx

and extracted code is:
{{{
        internal const ushort PROCESSOR_ARCHITECTURE_INTEL = 0;
        internal const ushort PROCESSOR_ARCHITECTURE_IA64 = 6;
        internal const ushort PROCESSOR_ARCHITECTURE_AMD64 = 9;
        internal const ushort PROCESSOR_ARCHITECTURE_UNKNOWN = 0xFFFF;

[StructLayout(LayoutKind.Sequential)]
        internal struct SYSTEM_INFO
        {
            public ushort wProcessorArchitecture;
            public ushort wReserved;
            public uint dwPageSize;
            public IntPtr lpMinimumApplicationAddress;
            public IntPtr lpMaximumApplicationAddress;
            public UIntPtr dwActiveProcessorMask;
            public uint dwNumberOfProcessors;
            public uint dwProcessorType;
            public uint dwAllocationGranularity;
            public ushort wProcessorLevel;
            public ushort wProcessorRevision;
        };

        [DllImport("kernel32.dll")]
        internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);

        private enum Platform
        {
            X86,
            X64,
            Unknown
        }

        private static Platform GetPlatform()
        {
            SYSTEM_INFO sysInfo = new SYSTEM_INFO();
            GetNativeSystemInfo(ref sysInfo);

            switch (sysInfo.wProcessorArchitecture)
            {
                case PROCESSOR_ARCHITECTURE_AMD64:
                    return Platform.X64;

                case PROCESSOR_ARCHITECTURE_INTEL:
                    return Platform.X86;

                default:
                    return Platform.Unknown;
            }
        }
}}}

and sample of usage would be:
{{{
            var platform = GetPlatform();
 
            if (platform == Platform.Unknown)
                throw new InvalidOperationException("Registering generator tools on this platform is not supported!");

            if (platform == Platform.X64)
                wowPrefix = WOW_NODE_PATTERN;
}}}

== On robustness in regard to Isolated storage usage ==

{{{
            // In our case when storage is disabled by the user we simply and silently are not going to
            // save
            if (!IsolatedStorageFile.IsEnabled)
                return;
            using (IsolatedStorageFile isf =
                System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication())
            {
                if (isf.FileExists(key))
                    isf.DeleteFile(key);

                using (Stream writer =
                    new IsolatedStorageFileStream(key, FileMode.CreateNew, isf))
                {
                    var serializer = new DataContractSerializer(data.GetType());
                    serializer.WriteObject(writer, data);
                }
            }
}}}

Unhandled Error in Silverlight Application Initialization failed. at System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStore(String group, String id) at System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication() at System.IO.IsolatedStorage.IsolatedStorageSettings.get_ApplicationSettings() at Microsoft.Silverlight.Testing.Client.TagEditor..ctor() at Microsoft.Silverlight.Testing.Client.TagEditor..ctor(String initialTagExpression, IList`1 sampleTags) at Microsoft.Silverlight.Testing.Client.TestPage.StartupMonitor(Object sender, EventArgs e) at MS.Internal.CoreInvokeHandler.InvokeEventHandler(Int32 typeIndex, Delegate handlerDelegate, Object sender, Object args) at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, String eventName)

== On Telerik's RadMenuItem Tooltip ==

{{{
					<telerik1:RadMenuItem Header="Hierarchy node X fgdfgsdmfgklmfglhmdklfhmkldfmghklmdfghkmdfghkmdfk..." >
						<ToolTipService.ToolTip>
		                    <ListBox x:Name="Applications" 
		                             Background="Transparent" BorderThickness="0" ItemsSource="{Binding Path=.}" 
		                             Margin="10,0,0,0" >
		                        <ListBox.ItemTemplate>
		                            <DataTemplate>
		                            	<StackPanel Orientation="Horizontal">
											<TextBlock Text="{Binding Path=.}" TextWrapping="Wrap" MaxWidth="200"/>
											<Image  Source="arrow_state_blue_right.png" Stretch="Fill" />
										</StackPanel>
		                            </DataTemplate>
		                        </ListBox.ItemTemplate>
								<ListBox.ItemsPanel>
					                <ItemsPanelTemplate>
					                    <StackPanel Orientation="Horizontal"/>                                           
					                </ItemsPanelTemplate>
					            </ListBox.ItemsPanel>
		                    </ListBox>
						</ToolTipService.ToolTip>
				</telerik1:RadMenuItem>
}}}
{{{
	public partial class MainPage : UserControl
	{
		public List<string> Nodes = new List<string>{"Node1", "Node2", "Node3 gggg", "Hierarchy node X"};
		
		public MainPage()
		{
			// Required to initialize variables
			InitializeComponent();
			this.DataContext = Nodes;	
		}
		
	}
}}}

== Cleaning Telerik's RadGridView Filter programmatically in MVVM way ==

{{{
    public class GridViewFilterBehaviour
    {
        public static DependencyProperty IsFilteringAllowedProperty = DependencyProperty.RegisterAttached(
    "IsFilteringAllowed", typeof(bool), typeof(RadGridView),
    new PropertyMetadata(false, IsFilteringAllowedChanged));

        private static void IsFilteringAllowedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var gridView = d as RadGridView;

            if (gridView != null && !(bool)gridView.GetValue(IsFilteringAllowedProperty))
            {
                if (gridView.FilterDescriptors != null)
                {
                    gridView.FilterDescriptors.Clear();
                }
            }
        }
        public static void SetIsFilteringAllowed(DependencyObject o, object propertyValue)
        {
            o.SetValue(IsFilteringAllowedProperty, propertyValue);
        }
        public static object GetIsFilteringAllowed(DependencyObject o)
        {
            return o.GetValue(IsFilteringAllowedProperty);
        }
    }
}}}
	xmlns:Behavior="clr-namespace:YouNamespace;assembly=YourDllNameWithoutDllExtension" 

Behavior:GridViewFilterBehaviour.IsFilteringAllowed="{Binding CanApplyDataFilter}"

{{{
        <telerik:RadGridView IsReadOnly="True" 
			x:Name="reportsGridView"
		   	ItemsSource="{Binding Reports}"
		  	ScrollMode="RealTime"
			ScrollViewer.VerticalScrollBarVisibility="Auto"
			ScrollViewer.HorizontalScrollBarVisibility="Auto"
		    DataLoadMode="Asynchronous"
            DragElementAction="None"
		  	EnableColumnVirtualization="True"  
            SelectionMode="Extended"
			EnableRowVirtualization="True"
			CanUserFreezeColumns="False" 
			CanUserSortColumns="True"
			AutoGenerateColumns="False" AutoExpandGroups="False" ShowGroupPanel="False"
			telerik:RadDragAndDropManager.AllowDrop="True"
			RowStyle="{StaticResource ReportItemStyle}"
			IsFilteringAllowed="{Binding CanApplyDataFilter, Mode=TwoWay}"
			RowIndicatorVisibility="Collapsed"
			Behavior:GridViewFilterBehaviour.IsFilteringAllowed="{Binding CanApplyDataFilter}"
			>
}}}

== On event triggers ==

{{{
<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
        .....
	>
		               <i:Interaction.Triggers>
	                <i:EventTrigger EventName="GotFocus" >
	                    <Events:ExecuteTriggerAction Command="GotFocusCommand" />
	                </i:EventTrigger>
            </i:Interaction.Triggers>
}}}

== On file download via silverlight and iframe ==
Published at: http://plainoldstan.blogspot.com/2010/08/iframe-based-file-download-silverlight.html

== Classic causes of problems with invoices/billing in telcos ==

=== Problems with delivery of all records to network usage db ===

=== Problems with correctness of rating ===

==== Quite often synchronization e.g. VPN platform and CM/Rating rules ====
==== Speed and reliability of provisioning ====

=== Correlation between ordering and provisioning ===

== On SOAP Action in WCF router ==

published: http://plainoldstan.blogspot.com/2010/11/on-soap-action-in-wcf-router-3x.html

== WCF: On whitespaces etc in WCF extension element ==

published: http://plainoldstan.blogspot.com/2010/11/wcf-extension-element-cannot-be-added.html

== WCF: On parsing Soap Fault from the raw message ==
published: http://plainoldstan.blogspot.com/2010/12/wcf-parse-fault-from-raw-message.html

== On wix customs actions and directories ==

published: http://plainoldstan.blogspot.com/2010/11/wix-set-properties-from-custom-action.html

== On passing variables to WiX - overwrite WiX variable ==

published:http://plainoldstan.blogspot.com/2010/12/override-wix-variables-from-team-build.html

== WiX do's a and don'ts ==
Do setup project dependencies for wix project, so it depends projects producing binaries that it requires (primary output plus custom tools).

Do use variables

Use some mass tool to produce initial wix fragment (parafin or heat)

== On wow for team build 2010 ==
Metadata for custom parameters/arguments.
http://www.ewaldhofman.nl/post/2010/05/17/Customize-Team-Build-2010-e28093-Part-6-Use-custom-type-for-an-argument.aspx

== On wcf message contract serialization ==

internal static DataContractFormatAttribute DefaultDataContractFormatAttribute;
----------
public static TypedMessageConverter Create(Type messageContract, string action)
{
    return Create(messageContract, action, null, TypeLoader.DefaultDataContractFormatAttribute);
}
-----------
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.sitronics.com/V2/SCAdapter")]
public partial class GetServiceStatusResponse : ResponseType
{
    
    private ServiceStatusType[] serviceStatusListField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
    [System.Xml.Serialization.XmlArrayItemAttribute("ServiceStatus", IsNullable=false)]
    public ServiceStatusType[] ServiceStatusList
    {
        get
        {
            return this.serviceStatusListField;
        }
        set
        {
            this.serviceStatusListField = value;
        }
    }
}
------------------
            TypedMessageConverter converter = TypedMessageConverter.Create(typeof(getServiceStatusResponse1), "*", "http://www.sitronics.com/V2/SCAdapter", new XmlSerializerFormatAttribute() );
            
            Message reply = converter.ToMessage(new getServiceStatusResponse1
            {
                GetServiceStatusResponse = result,
                OutboundServiceData = new OutboundServiceData { MsgCorrelations = new OutboundServiceDataMsgCorrelations { CorrelationID = "3333" } }
            }, OperationContext.Current.IncomingMessageVersion);


            if (message != null)
            {
                if (message.Properties != null &&
                    message.Properties.Count > 0)
                {
                    reply.Properties.CopyProperties(message.Properties);
                }
            }

            return reply;

------------------
[System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
public partial class getServiceStatusResponse1
{
    
    [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.sitronics.com/V2/SCAdapter")]
    public OutboundServiceData OutboundServiceData;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.sitronics.com/V2/SCAdapter", Order=0)]
    public GetServiceStatusResponse GetServiceStatusResponse;
    
    public getServiceStatusResponse1()
    {
    }
    
    public getServiceStatusResponse1(OutboundServiceData OutboundServiceData, GetServiceStatusResponse GetServiceStatusResponse)
    {
        this.OutboundServiceData = OutboundServiceData;
        this.GetServiceStatusResponse = GetServiceStatusResponse;
    }
}

== On updating file attributes in wix and beyond ==
http://www.microsoft.com/downloads/en/details.aspx?FamilyId=9BA6FAC6-520B-4A0A-878A-53EC8300C4C2&displaylang=en
