== On extending Silverlight Unit Test harness ==

{{{
public virtual void EnqueueCallback(Action testCallbackDelegate)
{
    this.EnqueueWorkItem(new CallbackWorkItem(testCallbackDelegate));
}
}}}

{{{

            // First callback work item is going to mark db as dirty
            EnqueueCallback(() =>
            {
                MarkDatabaseAsDirty();

            });
            // Prior to the second call back work item we should have called the service
            // to restore to the original snaphots and we expect that DBCleanupRequired
            // is set to false on service async callback. As a bit of a manual check we 
            // can verify that service really was called between those two work items.
            EnqueueCallback(() =>
            {
                Assert.IsFalse(((CustomTestHarness) UnitTestHarness).DBCleanupRequired);
                EnqueueTestComplete();
            });

}}}

{{{
        private void Application_Startup(object sender, StartupEventArgs e)
        {
            RootVisual = UnitTestSystem.CreateTestPage(HarnessProvider.CreateDefaultSettings(this.GetType().Assembly));
        }
}}}

{{{
using System;
using System.ServiceModel;
using System.Windows.Threading;
using Microsoft.Silverlight.Testing.Harness;
using Valtera.SilverlightShared.Testing;

namespace SilverlightTesting.Harness
{
    public class CustomTestHarness : UnitTestHarness
    {
        public override void RestartRunDispatcher()
        {
            this.RunDispatcher = new CustomFastRunDispatcher(new Func<bool>(this.RunNextStep), this.Dispatcher);
            this.RunDispatcher.Complete += new EventHandler(this.RunDispatcherComplete);
            this.RunDispatcher.Run();
        }
        public bool DBCleanupRequired
        {
            get { return ((CustomFastRunDispatcher)RunDispatcher).DBCleanupRequired; }
            set { ((CustomFastRunDispatcher)RunDispatcher).DBCleanupRequired = value; }
        }
    }

    public class CustomFastRunDispatcher : FastRunDispatcher
    {
        private readonly Func<bool> _runNextStep;
        private readonly Dispatcher _dispatcher;
        private volatile bool _dbCleanupRequired = true;
        public ITestService TestPreparationService { get; set; }

        public CustomFastRunDispatcher( Func<bool> runNextStep, Dispatcher dispatcher ) : base(runNextStep, dispatcher)
        {
            _runNextStep = runNextStep;
            _dispatcher = dispatcher;
            TestPreparationService = new ChannelFactory<ITestService>(typeof(ITestService).Name).CreateChannel();
        }

        public bool DBCleanupRequired
        {
            get { return _dbCleanupRequired; }
            set { _dbCleanupRequired = value; }
        }

        public override void Run()
        {
            if (DBCleanupRequired)
            {
                TestPreparationService.BeginPrepareDatabases(HandlePreparationCallback, null);
            }
            else
            {
                this._dispatcher.BeginInvoke(() => { RunNext(); }); 
            }
        }
        private void HandlePreparationCallback(IAsyncResult ar)
        {
            this._dispatcher.BeginInvoke(
                () =>
                {
                    DBCleanupRequired = false;
                    TestPreparationService.EndPrepareDatabases(ar); 
                    RunNext();
                });
            
        }
        private void RunNext()
        {
            if (IsRunning || _runNextStep())
            {
                Run();
            }
            else
            {
                OnComplete();
            }
        }
    }
}
}}}


{{{

    public class HarnessProvider
    {
        public static UnitTestSettings CreateDefaultSettings(Assembly callingAssembly)
        {
            var settings = new UnitTestSettings();
            if (callingAssembly != null)
            {
                settings.TestAssemblies.Add(callingAssembly);
            }
            settings.TestHarness = new CustomTestHarness();
            settings.TestService = new SilverlightTestService(settings);

            return settings;
        }
    }

}}}