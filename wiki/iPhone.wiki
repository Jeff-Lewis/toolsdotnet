#summary iPhone dev experience.

= Idioms =

= User messages =

== Unavailabiliies ==
=== location services ===
You have currently disabled location services for this app. By doing this you're missing out on some great features that come with this app! If you change your mind, you can enable it by going to settings > general > location services. Thanks!

=== altitude ===
{{{
If (signbit(newLocation.verticalAccuracy)) {
// get the altitude
}
}}}

=== airplane mode ===
http://stackoverflow.com/questions/4804398/iphone-detect-airplane-mode


You can add the SBUsesNetwork boolean flag set to true in your Info.plist to display the popup used in Mail when in Airplane Mode.

*UIRequiresPersistentWifi, SBUsesNetwork should not be used*

=== SMS ===

http://stackoverflow.com/questions/3622744/check-if-iphone-can-send-texts-w-mfmessagecomposeviewcontroller

{{{

Example from the MessageComposer sample:

-(IBAction)showSMSPicker:(id)sender {
//  The MFMessageComposeViewController class is only available in iPhone OS 4.0 or later. 
//  So, we must verify the existence of the above class and log an error message for devices
//      running earlier versions of the iPhone OS. Set feedbackMsg if device doesn't support 
//      MFMessageComposeViewController API.
Class messageClass = (NSClassFromString(@"MFMessageComposeViewController"));

if (messageClass != nil) {          
    // Check whether the current device is configured for sending SMS messages
    if ([messageClass canSendText]) {
        [self displaySMSComposerSheet];
    }
    else {  
        feedbackMsg.hidden = NO;
        feedbackMsg.text = @"Device not configured to send SMS.";

    }
}
else {
    feedbackMsg.hidden = NO;
    feedbackMsg.text = @"Device not configured to send SMS.";
}
}

}}}

http://developer.apple.com/library/ios/#samplecode/MessageComposer/Listings/Classes_MessageComposerViewController_m.html

=== Check if a call can be placed from a device ===

{{{
NSURL *phoneNumberURL = [NSURL URLWithString:@"tel://004412345"];
if([[UIApplication sharedApplication] openURL:phoneNumberURL] == YES) {
  ...
}

}}}

http://stackoverflow.com/questions/6034504/how-to-check-device-is-not-able-to-send-sms

=== model and platform ===

http://stackoverflow.com/questions/448162/determine-device-iphone-ipod-touch-with-iphone-sdk

{{{


Usage

UIDeviceHardware *h=[[UIDeviceHardware alloc] init];
[self setDeviceModel:[h platformString]];   
[h release];

UIDeviceHardware.h

//
//  UIDeviceHardware.h
//
//  Used to determine EXACT version of device software is running on.

#import <Foundation/Foundation.h>

@interface UIDeviceHardware : NSObject 

- (NSString *) platform;
- (NSString *) platformString;

@end

UIDeviceHardware.m

//
//  UIDeviceHardware.m
//
//  Used to determine EXACT version of device software is running on.

#import "UIDeviceHardware.h"
#include <sys/types.h>
#include <sys/sysctl.h>

@implementation UIDeviceHardware

- (NSString *) platform{
    size_t size;
    sysctlbyname("hw.machine", NULL, &size, NULL, 0);
    char *machine = malloc(size);
    sysctlbyname("hw.machine", machine, &size, NULL, 0);
    NSString *platform = [NSString stringWithCString:machine];
    free(machine);
    return platform;
}

- (NSString *) platformString{
    NSString *platform = [self platform];
    if ([platform isEqualToString:@"iPhone1,1"])    return @"iPhone 1G";
    if ([platform isEqualToString:@"iPhone1,2"])    return @"iPhone 3G";
    if ([platform isEqualToString:@"iPhone2,1"])    return @"iPhone 3GS";
    if ([platform isEqualToString:@"iPhone3,1"])    return @"iPhone 4";
    if ([platform isEqualToString:@"iPhone3,2"])    return @"Verizon iPhone 4";
    if ([platform isEqualToString:@"iPod1,1"])      return @"iPod Touch 1G";
    if ([platform isEqualToString:@"iPod2,1"])      return @"iPod Touch 2G";
    if ([platform isEqualToString:@"iPod3,1"])      return @"iPod Touch 3G";
    if ([platform isEqualToString:@"iPod4,1"])      return @"iPod Touch 4G";
    if ([platform isEqualToString:@"iPad1,1"])      return @"iPad";
    if ([platform isEqualToString:@"iPad2,1"])      return @"iPad 2 (WiFi)";
    if ([platform isEqualToString:@"iPad2,2"])      return @"iPad 2 (GSM)";
    if ([platform isEqualToString:@"iPad2,3"])      return @"iPad 2 (CDMA)";
    if ([platform isEqualToString:@"i386"])         return @"Simulator";
    return platform;
}

@end

}}}

=== GPS ===

http://stackoverflow.com/questions/5897204/show-gps-availabilty-and-accuracy-in-iphone-sdk

{{{
[CLLocationManager locationServicesEnabled]
}}}

==== GPS fix ====

http://stackoverflow.com/questions/2004689/detect-gps-hardware-in-iphone

use of verticalAccuracy, when -1 - there is no fix (on iphone)

CLLocation.verticalAccuracy

== Rounded corners for anything ==

http://stackoverflow.com/questions/5138996/how-can-i-draw-rounded-rectangles-around-my-textfields-and-buttons-like-foursquar

== Debugging with NSZombie ==

http://www.cocoadev.com/index.pl?DebuggingAutorelease

To add and set to YES in environment arguments:

  --NSDebugEnabled
  NSZombieEnabled
  MallocStackLogging
  MallocStackLoggingNoCompact

When you face EXC_BAD_ACCESS:

{{{2011-06-19 22:27:07.363 Taxican[15971:207] *** -[CALayer retain]: message sent to deallocated instance 0x60d7af0}}}

shell malloc_history 15971 0x60d7af0

== Sample of an address dictionary in a placemark ==

{{{

{
    City = "Prague 8";
    Country = "Czech Republic";
    CountryCode = CZ;
    FormattedAddressLines =     (
        "\U0160im\U016fnkova 1183/16",
        "182 00 Prague 8-Kobylisy",
        "Czech Republic"
    );
    State = Prague;
    Street = "\U0160im\U016fnkova 16";
    SubAdministrativeArea = Prague;
    SubLocality = Kobylisy;
    SubThoroughfare = 16;
    Thoroughfare = "\U0160im\U016fnkova";
    ZIP = "182 00";
}
}}}

= Memory management =
== detach new thread and autorelease pool ==

{{{
[NSThread detachNewThreadSelector:@selector(displayMap) toTarget:self
withObject:nil];

- (void)displayMap {
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
...
[pool drain];
}
}}}

= Selectors =
== _cmd ==
{{{
-(void) tenMinutesElapsed:(ccTime)delta
{
// unschedule the current method by using the _cmd keyword
[self unschedule:_cmd];
}
}}}
The hidden variable _cmd is available in all Objective-C methods. It is the selector of the
current method. In the previous example, _cmd is equivalent to writing
@selector(tenMinutesElapsed:). Unscheduling _cmd effectively stops the
tenMinutesElapsed method from ever being called again. You can also use _cmd for
scheduling the selector in the first place, if you want the current method to be
scheduled.

= Logging =
== NSLog in debug and release ==
{{{
#ifndef NS_BLOCK_ASSERTIONS
    #define _DEBUG
#endif

#ifdef _DEBUG
// for debug mode 
#define DLog(fmt,...) NSLog(@"%s " fmt, __FUNCTION, ##__VA_ARGS__) 
... /// something extra
#else
// for release mode
#define DLog(fmt,...) /* noop */
... /// something extra
#endif
}}}
source: http://stackoverflow.com/questions/2025471/do-i-need-to-disable-nslog-before-release-application
== Logging in cocos ==
{{{
CCLOG(@"%@: %@", NSStringFromSelector(_cmd), self);
}}}