#summary Reading notes for "Javascript - The Good parts."
#labels javascript

=Notes=
== Chapter 1 ==
A simple testing ground didn't work for me in all browsers, here is ther version that worked in all major (IE, Chrome, FF)

{{{
<html>
<head><script src="test.js"></script></head>
<body><pre><script>hello();</script></pre>
</body>
</html>
}}}

and java script:

{{{

// add hello to the document
function hello()
{
	document.writeln('Hello, world!');
}

}}}

== Chapter 2. Grammer ==

Infinity represents all values greater than 1.79769313486231570e+308.

False values: false, null, undefined, the empty string '', the number 0, the number NaN

== Chapter 3. Objects ==

Everything is object except for numbers, strings, booleans (true and false), null, and undefined.
Objects are mutable keyed collections of properties. Objects are class free. 

Prototype linkage feature - so one object can inherit properties from another. 

Objects Literal - a notation for creating new object values from literals.

Example:

{{{

// playing with object literals
function objectLiterals()
{
	var framework = {"title": ".NET", author: "Microsoft"}
	
	for (prop in framework)
	{
		if(framework.hasOwnProperty(prop))
		{
			document.writeln(prop);
		}
	}
}

}}}

Output:

{{{

title
author

}}}

More complex example, showing the mix of literal property definitions:

{{{

// playing with object literals
function objectLiterals()
{
	var dotnetframework = {"title": ".NET", author: "Microsoft"};
	var solution = {
		framework: dotnetframework,
		resources: {
			developerCount: 3,
			hours: 1020,
			},
		startDate: '01-Jun-2010',
		"endDate": "06-Oct-2010"
		};
	
	
	for (prop in solution)
	{
		if(solution.hasOwnProperty(prop))
		{
			document.writeln(prop);
		}
	}
}
}}}

and the output:

{{{

framework
resources
startDate
endDate

}}}

Retrieving object values:

["name"] or using . notation (preferred).

{{{

// retrieving object properties
function objectOperations()
{
	var dotnetframework = {"title": ".NET", author: "Microsoft"};
	var solution = {
		framework: dotnetframework,
		resources: {
			developerCount: 3,
			hours: 1020,
			},
		startDate: '01-Jun-2010',
		"endDate": "06-Oct-2010"
		};
		
	document.writeln("solution:", solution);	
	document.writeln("solution.framework:", solution.framework);
	document.writeln("solution.framework.title:", solution.framework.title);	
	document.writeln("solution.duration:", solution.duration);		
	document.writeln("solution.duration && solution.duration.hours:", solution.duration && solution.duration.hours);	// guarding against TypeError exception
	document.writeln("solution.duration || 3:", solution.duration || 3); // providing default value	
	document.writeln("solution.endDate:", solution.endDate);
}

}}}

Output:

{{{

solution:[object Object]
solution.framework:[object Object]
solution.framework.title:.NET
solution.duration:undefined
solution.duration && solution.duration.hours:undefined
solution.duration || 3:3
solution.endDate:06-Oct-2010

}}}